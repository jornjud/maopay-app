// src/app/riders/register/page.tsx
"use client";

import React, { useState, useEffect } from 'react';
import { useAuth } from '@/components/auth/AuthProvider'; // << Import ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ User
import { useRouter } from 'next/navigation'; // << Import ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö redirect
import { doc, setDoc } from "firebase/firestore";
import { db } from "@/lib/firebase";

export default function App() {
  const { user, loading: authLoading } = useAuth(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏°‡∏≤‡πÉ‡∏ä‡πâ
  const router = useRouter(); // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° router ‡πÑ‡∏ß‡πâ

  // State to hold form data for rider registration
  const [formData, setFormData] = useState({
    fullName: '',
    phone: '',
    vehicleType: '',
    licensePlate: '',
    // ‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ email/password ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ user ‡∏ï‡πâ‡∏≠‡∏á login ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
  });

  // State for displaying messages to the user and loading status
  const [message, setMessage] = useState({ type: '', text: '' });
  const [isLoading, setIsLoading] = useState(false);

  // --- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà! ---
  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ login ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà login ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏õ
  useEffect(() => {
    if (!authLoading && !user) {
      alert("‡πÄ‡∏Æ‡πâ‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô! ‡∏ï‡πâ‡∏≠‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ üòú");
      router.push('/login?redirect=/riders/register');
    }
  }, [user, authLoading, router]);
  // --- ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà ---

  // Function to handle input changes and update form data state
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  // --- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç handleSubmit ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î! ---
 const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
  e.preventDefault(); 
  if (!user) {
      setMessage({ type: 'error', text: 'User is not authenticated.' });
      return;
  }

  setIsLoading(true);
  setMessage({ type: '', text: '' });

  try {
      // --- ‡∏ô‡∏µ‡πà‡πÑ‡∏á! ‡∏¢‡∏¥‡∏á‡∏ï‡∏£‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà Firestore ‡πÄ‡∏•‡∏¢ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á fetch ‡πÅ‡∏•‡πâ‡∏ß ---
      // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ user.uid ‡πÄ‡∏õ‡πá‡∏ô ID ‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ô collection 'riders' ‡πÄ‡∏•‡∏¢
      const riderRef = doc(db, "riders", user.uid);

      await setDoc(riderRef, {
          userId: user.uid,
          name: formData.fullName,
          phone: formData.phone,
          vehicleDetails: {
              type: formData.vehicleType,
              licensePlate: formData.licensePlate,
          },
          status: 'pending', // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡∏£‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
          createdAt: new Date(),
      });

      setMessage({ type: 'success', text: '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! üéâ ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏à‡∏∞‡∏£‡∏µ‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏ô‡∏∞!' });
      // ‡∏û‡∏≤‡πÑ‡∏õ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÄ‡∏•‡∏¢ ‡πÄ‡∏ó‡πà‡πÜ
      router.push('/dashboard'); 

  } catch (err: unknown) {
      const errorMessage = err instanceof Error ? err.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å';
      console.error("Firestore Error:", err);
      setMessage({ type: 'error', text: `‡πÇ‡∏≠‡πä‡∏¢! ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏ß‡πà‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô: ${errorMessage}` });
  } finally {
      setIsLoading(false);
  }
};
  
  if (authLoading || !user) {
    return <div className="min-h-screen flex items-center justify-center">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏õ‡πä‡∏õ...</div>
  }

  // --- ‡∏™‡πà‡∏ß‡∏ô JSX ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ---
  return (
    <div className="min-h-screen bg-gray-100 flex items-center justify-center p-4 sm:p-6">
      <div className="bg-white p-6 sm:p-8 rounded-xl shadow-lg w-full max-w-md">
        <h1 className="text-3xl font-extrabold text-gray-800 text-center mb-6">
          ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå MaoPay üèçÔ∏èüí®
        </h1>
        <p className="text-gray-600 text-center mb-8">
          ‡∏°‡∏≤‡∏ã‡∏¥‡πà‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏£‡πà‡∏≠‡∏¢‡πÑ‡∏õ‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤‡∏™‡∏¥!
        </p>

        {message.text && (
          <div
            className={`p-3 rounded-lg text-center mb-4 text-sm font-medium ${
              message.type === 'success'
                ? 'bg-green-100 text-green-700'
                : 'bg-red-100 text-red-700'
            }`}
          >
            {message.text}
          </div>
        )}

        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label htmlFor="fullName" className="block text-sm font-medium text-gray-700 mb-1">
              ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              id="fullName"
              name="fullName"
              value={formData.fullName}
              onChange={handleChange}
              required
              disabled={isLoading}
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-purple-500 focus:border-purple-500 sm:text-sm"
              placeholder="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
            />
          </div>

          <div>
            <label htmlFor="phone" className="block text-sm font-medium text-gray-700 mb-1">
              ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: <span className="text-red-500">*</span>
            </label>
            <input
              type="tel"
              id="phone"
              name="phone"
              value={formData.phone}
              onChange={handleChange}
              required
              disabled={isLoading}
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-purple-500 focus:border-purple-500 sm:text-sm"
              placeholder="08X-XXX-XXXX"
            />
          </div>

          <div>
            <label htmlFor="vehicleType" className="block text-sm font-medium text-gray-700 mb-1">
              ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏û‡∏≤‡∏´‡∏ô‡∏∞: <span className="text-red-500">*</span>
            </label>
            <select
              id="vehicleType"
              name="vehicleType"
              value={formData.vehicleType}
              onChange={handleChange}
              required
              disabled={isLoading}
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-purple-500 focus:border-purple-500 sm:text-sm"
            >
              <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏û‡∏≤‡∏´‡∏ô‡∏∞</option>
              <option value="motorcycle">‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå üèçÔ∏è</option>
              <option value="car">‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå üöó</option>
            </select>
          </div>

          <div>
            <label htmlFor="licensePlate" className="block text-sm font-medium text-gray-700 mb-1">
              ‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ: <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              id="licensePlate"
              name="licensePlate"
              value={formData.licensePlate}
              onChange={handleChange}
              required
              disabled={isLoading}
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-purple-500 focus:border-purple-500 sm:text-sm"
              placeholder="‡∏Å‡∏Ç 1234 ‡∏´‡∏£‡∏∑‡∏≠ 1‡∏Å‡∏Ç 1234"
            />
          </div>

          <button
            type="submit"
            disabled={isLoading}
            className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-lg font-semibold text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition duration-150 ease-in-out disabled:bg-gray-400"
          >
            {isLoading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...' : '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå üí®'}
          </button>
        </form>
      </div>
    </div>
  );
}