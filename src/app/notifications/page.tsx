// src/app/notifications/page.tsx
"use client";

import React, { useState } from 'react';
import { getMessaging, getToken } from "firebase/messaging";
import { app } from '@/lib/firebase';
import { Button } from '@/components/ui/button';

export default function App() {
  const [notificationToken, setNotificationToken] = useState<string | null>(null);
  const [message, setMessage] = useState<{ type: string; text: string } | null>(null);

  const requestPermissionAndGetToken = async () => {
    setMessage({ type: 'info', text: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï...' });
    try {
      const messaging = getMessaging(app);
      const permission = await Notification.requestPermission();

      if (permission === 'granted') {
        setMessage({ type: 'success', text: '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á Token...' });

        const currentToken = await getToken(messaging, {
          vapidKey: 'BKcjhwBLOSgnGyu8U1Ei0z3pQhmT7OkkU9ikKrlSHxQrA2sKLto8iaqK0Pa0LjjPSqxPUTbhiGXCOCVdxN1_w_U',
        });

        if (currentToken) {
          setNotificationToken(currentToken);
          console.log('FCM Token:', currentToken);
          setMessage({ type: 'success', text: '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! üéâ' });
          // ‡πÄ‡∏£‡∏≤‡∏•‡∏ö onMessage ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô FirebaseMessagingProvider
        } else {
          setMessage({ type: 'error', text: '‡∏ä‡∏¥‡∏ö‡∏´‡∏≤‡∏¢! ‡∏î‡∏∂‡∏á Token ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•‡∏î‡∏π' });
        }
      } else {
        setMessage({ type: 'error', text: '‡∏≠‡∏î‡πÄ‡∏•‡∏¢! ‡∏ô‡∏≤‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô üö´' });
      }
    } catch (error) {
        console.error('An error occurred while retrieving token. ', error);
        setMessage({ type: 'error', text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ï‡∏≠‡∏ô‡∏Ç‡∏≠ Token ‡∏ß‡πà‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô' });
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col items-center p-4 sm:p-6 lg:p-8">
      <div className="max-w-xl w-full bg-white p-6 rounded-xl shadow-lg mb-6">
        <h1 className="text-3xl font-bold text-gray-800 text-center mb-4">
          ‡∏´‡∏ô‡πâ‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô üîî
        </h1>
        <p className="text-gray-600 text-center mb-8">
          ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ MaoPay ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏≤‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ
        </p>

        {message && (
          <div
            className={`p-3 rounded-lg text-center mb-4 text-sm font-medium ${
              message.type === 'success' ? 'bg-green-100 text-green-700'
              : message.type === 'error' ? 'bg-red-100 text-red-700'
              : 'bg-blue-100 text-blue-700'
            }`}
          >
            {message.text}
          </div>
        )}

        <Button
          onClick={requestPermissionAndGetToken}
          className="w-full bg-green-600 hover:bg-green-700 text-white font-semibold py-3 text-lg"
        >
          ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÅ‡∏•‡∏∞‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        </Button>

        {notificationToken && (
           <div className="bg-gray-50 p-4 rounded-lg mt-6 border border-gray-200">
             <p className="text-gray-700 font-semibold mb-2">FCM Registration Token ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏≤‡∏¢:</p>
             <code className="block bg-gray-100 p-2 rounded-md text-sm text-gray-800 break-all">
               {notificationToken}
             </code>
           </div>
        )}
      </div>
    </div>
  );
}