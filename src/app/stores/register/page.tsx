"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { collection, addDoc, serverTimestamp } from "firebase/firestore";
import { db } from "@/lib/firebase";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"; // << ‡πÄ‡∏û‡∏¥‡πà‡∏° import Select
import { useAuth } from "@/components/auth/AuthProvider";
import { useRouter } from "next/navigation";

export default function RegisterStorePage() {
  const { user } = useAuth();
  const router = useRouter();
  const [storeName, setStoreName] = useState("");
  const [description, setDescription] = useState("");
  const [address, setAddress] = useState("");
  const [phoneNumber, setPhoneNumber] = useState("");
  const [storeType, setStoreType] = useState(""); // << ‡πÄ‡∏û‡∏¥‡πà‡∏° State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
  e.preventDefault();
  if (!user) {
    setError("‡πÄ‡∏Æ‡πâ‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô! ‡∏ï‡πâ‡∏≠‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏î‡πâ üòú");
    router.push("/login?redirect=/stores/register");
    return;
  }

  if (!storeName || !description || !address || !phoneNumber || !storeType) {
    setError("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô");
    return;
  }

  setIsLoading(true);
  setError("");
  setSuccess("");

  try {
    // --- ‡∏ô‡∏µ‡πà‡πÑ‡∏á! ‡∏¢‡∏¥‡∏á‡∏ï‡∏£‡∏á‡πÑ‡∏õ Firestore ‡πÄ‡∏•‡∏¢ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á fetch ‡πÅ‡∏•‡πâ‡∏ß ---
    await addDoc(collection(db, "stores"), {
      ownerId: user.uid,
      name: storeName,
      description,
      type: storeType,
      location: {
        address: address,
        phone: phoneNumber,
      },
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô
      imageUrl: `https://placehold.co/600x400/orange/white?text=${encodeURIComponent(storeName)}`,
      status: 'pending', // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡∏£‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
      createdAt: serverTimestamp(), // ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
    });

    setSuccess("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏ß‡πâ‡∏¢! ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ ‡∏£‡∏≠‡πÅ‡∏õ‡πä‡∏õ! ü•≥");
    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ã‡∏∞‡∏´‡∏ô‡πà‡∏≠‡∏¢
    setStoreName("");
    setDescription("");
    setAddress("");
    setPhoneNumber("");
    setStoreType("");

    // ‡∏û‡∏≤‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÄ‡∏•‡∏¢‡∏Å‡πá‡πÑ‡∏î‡πâ ‡πÄ‡∏ó‡πà‡πÜ
    // setTimeout(() => {
    //   router.push('/dashboard');
    // }, 2000);

  } catch (error: unknown) {
    const errorMessage =
      error instanceof Error ? error.message : "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏≠‡πà‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô";
    console.error("Firestore Error:", error);
    setError(`‡πÇ‡∏≠‡πä‡∏¢! ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏ß‡πà‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô: ${errorMessage}`);
  } finally {
    setIsLoading(false);
  }
};

  return (
    <div className="container mx-auto flex items-center justify-center py-12">
      <Card className="w-full max-w-lg">
        <CardHeader>
          <CardTitle className="text-2xl">‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡∏±‡∏ö MaoPay</CardTitle>
          <CardDescription>
            ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ö‡∏ô‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤
          </CardDescription>
        </CardHeader>
        <CardContent>
          {success ? (
            <div className="text-center p-4 bg-green-100 text-green-800 rounded-md">
              <p>{success}</p>
            </div>
          ) : (
            <form onSubmit={handleSubmit} className="grid gap-4">
              <div className="grid gap-2">
                <Label htmlFor="store-name">‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤</Label>
                <Input
                  id="store-name"
                  type="text"
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡πÅ‡∏Å‡∏á‡∏õ‡∏∑‡∏ô‡πÉ‡∏´‡∏ç‡πà"
                  required
                  value={storeName}
                  onChange={(e) => setStoreName(e.target.value)}
                />
              </div>

              {/* --- üëáüëá ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô! üëáüëá --- */}
              <div className="grid gap-2">
                <Label htmlFor="store-type">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤</Label>
                <Select
                  required
                  onValueChange={(value) => setStoreType(value)}
                  value={storeType}
                >
                  <SelectTrigger id="store-type">
                    <SelectValue placeholder="-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ --" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="restaurant">‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£</SelectItem>
                    <SelectItem value="cafe">‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà</SelectItem>
                    <SelectItem value="street_food">‡∏™‡∏ï‡∏£‡∏µ‡∏ó‡∏ü‡∏π‡πâ‡∏î</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="grid gap-2">
                <Label htmlFor="description">‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤</Label>
                <Textarea
                  id="description"
                  placeholder="‡∏ö‡∏≠‡∏Å‡πÄ‡∏£‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
                  required
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="address">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</Label>
                <Textarea
                  id="address"
                  placeholder="‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà, ‡∏ñ‡∏ô‡∏ô, ‡∏ï‡∏≥‡∏ö‡∏•, ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠, ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î, ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå"
                  required
                  value={address}
                  onChange={(e) => setAddress(e.target.value)}
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="phone-number">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠</Label>
                <Input
                  id="phone-number"
                  type="tel"
                  placeholder="08xxxxxxxx"
                  required
                  value={phoneNumber}
                  onChange={(e) => setPhoneNumber(e.target.value)}
                />
              </div>
              {error && <p className="text-red-500 text-sm">{error}</p>}
              <Button type="submit" className="w-full" disabled={isLoading}>
                {isLoading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£..." : "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤"}
              </Button>
            </form>
          )}
        </CardContent>
      </Card>
    </div>
  );
}