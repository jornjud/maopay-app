import { NextRequest, NextResponse } from 'next/server';
import { db } from '../../../../lib/firebase';
import { doc, getDoc } from 'firebase/firestore';

interface NotifyRidersRequest {
  orderId: string;
  storeId: string;
}

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
// --- ‡πÄ‡∏à‡πä‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ---
const RIDER_CHAT_ID = process.env.TELEGRAM_RIDER_GROUP_CHAT_ID;
const BASE_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;

async function sendTelegramNotification(chatId: string, text: string, orderId: string) {
  const url = `${BASE_URL}/sendMessage`;
  const appBaseUrl = process.env.NEXT_PUBLIC_APP_URL || 'https://maopay-app.vercel.app';
  const orderUrl = `${appBaseUrl}/dashboard/rider?orderId=${orderId}`;

  const body = {
    chat_id: chatId,
    text: text,
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üõµ ‡∏Å‡∏î‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô', url: orderUrl }
        ]
      ]
    }
  };

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(body),
    });
    const data = await response.json();
    if (!data.ok) {
      console.error('Failed to send Telegram message:', data.description);
    }
  } catch (error) {
    console.error('Error sending Telegram message:', error);
  }
}

export async function POST(req: NextRequest) {
  // --- ‡πÄ‡∏à‡πä‡πÅ‡∏Å‡πâ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ---
  if (!TELEGRAM_BOT_TOKEN || !RIDER_CHAT_ID) {
    console.error('TELEGRAM_BOT_TOKEN or TELEGRAM_RIDER_GROUP_CHAT_ID is not set!');
    return NextResponse.json({ error: 'Server configuration error.' }, { status: 500 });
  }

  try {
    // ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏¢‡∏±‡∏á‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
    const { orderId, storeId }: NotifyRidersRequest = await req.json();

    if (!orderId || !storeId) {
      return NextResponse.json({ error: 'Missing orderId or storeId' }, { status: 400 });
    }

    const storeRef = doc(db, 'stores', storeId);
    const storeSnap = await getDoc(storeRef);

    if (!storeSnap.exists()) {
      return NextResponse.json({ error: 'Store not found' }, { status: 404 });
    }
    const storeData = storeSnap.data();

    // --- ‡πÄ‡∏à‡πä‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á chatId ‡∏à‡∏≤‡∏Å storeData.telegramGroupId ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ ---
    // ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ RIDER_CHAT_ID ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô‡πÅ‡∏ó‡∏ô

    const orderRef = doc(db, 'orders', orderId);
    const orderSnap = await getDoc(orderRef);

    if (!orderSnap.exists()) {
      return NextResponse.json({ error: 'Order not found' }, { status: 404 });
    }
    const orderData = orderSnap.data();
    const storeLocation = storeData.location?.address || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';

    const itemsSummary = orderData.items.map((item: { name: string; quantity: number; }) => `  - ${item.name} (x${item.quantity})`).join('\\n');
    const message = `
üö® *‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏à‡πâ‡∏≤!* üö®

*‡∏à‡∏≤‡∏Å‡∏£‡πâ‡∏≤‡∏ô:* ${storeData.name}
*‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏£‡πâ‡∏≤‡∏ô:* ${storeLocation}

*‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£:*
${itemsSummary}

*‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°:* ${orderData.totalPrice.toFixed(2)} ‡∏ö‡∏≤‡∏ó

*‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á:*
${orderData.deliveryAddress.address || '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà!'}
    `;

    // --- ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏•‡∏¢! ---
    await sendTelegramNotification(RIDER_CHAT_ID, message, orderId);

    return NextResponse.json({ message: 'Notification sent successfully to riders.' });

  } catch (error) {
    console.error('Error in notify-riders endpoint:', error);
    if (error instanceof Error) {
        return NextResponse.json({ error: `Internal Server Error: ${error.message}` }, { status: 500 });
    }
    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });
  }
}