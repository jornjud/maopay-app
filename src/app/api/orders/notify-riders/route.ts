import { NextResponse } from 'next/server';
import { db } from '@/lib/firebase';
import { doc, getDoc, updateDoc } from 'firebase/firestore';

async function sendTelegramMessage(chatId: string, text: string) {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    if (!token || !chatId) {
        console.error("Telegram token or Chat ID is missing.");
        return;
    }
    const url = `https://api.telegram.org/bot${token}/sendMessage`;
    
    try {
        await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                chat_id: chatId,
                text: text,
                parse_mode: 'Markdown',
            }),
        });
    } catch (error) {
        console.error("Failed to send Telegram message:", error);
    }
}

export async function POST(request: Request) {
    try {
        const body = await request.json();
        const { orderId } = body;

        if (!orderId) {
            return NextResponse.json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö ID ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå' }, { status: 400 });
        }

        const orderDocRef = doc(db, "orders", orderId);
        const orderDocSnap = await getDoc(orderDocRef);

        if (!orderDocSnap.exists()) {
            return NextResponse.json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' }, { status: 404 });
        }
        const orderData = orderDocSnap.data();
        const storeId = orderData.storeId;

        const storeDocRef = doc(db, "stores", storeId);
        const storeDocSnap = await getDoc(storeDocRef);
        const storeName = storeDocSnap.exists() ? storeDocSnap.data().name : '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô';
        
        const riderChatId = process.env.TELEGRAM_RIDER_GROUP_CHAT_ID;
        if (!riderChatId) {
            throw new Error("‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ TELEGRAM_RIDER_GROUP_CHAT_ID");
        }

        let message = `üõµüí® *‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤!* üõµüí®\n\n`;
        message += `*‡∏£‡πâ‡∏≤‡∏ô:* ${storeName}\n`;
        message += `*‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°:* ${orderData.totalPrice} ‡∏ö‡∏≤‡∏ó\n`;
        message += `*‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:* ‡∏£‡∏≠‡∏•‡∏±‡πà‡∏ô!\n\n`;
        message += `‡πÉ‡∏Ñ‡∏£‡πÉ‡∏Å‡∏•‡πâ ‡∏Å‡∏î‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!`;
        
        await sendTelegramMessage(riderChatId, message);
        
        await updateDoc(orderDocRef, {
            status: 'notifying_riders'
        });

        return NextResponse.json({ message: '‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!' }, { status: 200 });

    } catch (error: unknown) { // << ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å any ‡πÄ‡∏õ‡πá‡∏ô unknown
        const errorMessage = error instanceof Error ? error.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î';
        console.error("Error notifying riders:", error);
        return NextResponse.json({ error: errorMessage }, { status: 500 });
    }
}
