// src/app/cart/page.tsx
"use client";

import { addDoc, collection, serverTimestamp, doc, getDoc } from 'firebase/firestore';
import { db } from '@/lib/firebase';
import { useState } from 'react';
import { useCartStore } from '@/store/cartStore'; 
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import Image from 'next/image';
import { useAuth } from '@/components/auth/AuthProvider';
import { useRouter } from 'next/navigation';
import { MinusCircle, PlusCircle, Trash2 } from 'lucide-react';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';

const CartPage = () => {
  const { items, storeId, removeItem, increaseQuantity, decreaseQuantity, clearCart } = useCartStore();
  const { user } = useAuth();
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [deliveryAddress, setDeliveryAddress] = useState('');

  const subtotal = items.reduce((acc, item) => acc + item.price * item.quantity, 0);
  
  const deliveryFee = Math.ceil(items.reduce((acc, item) => acc + item.quantity, 0) / 5) * 10;
  const appFee = 1; 
  const total = subtotal + deliveryFee + appFee;

  const handleCheckout = async () => {
    if (!user) {
        router.push('/login?redirect=/cart');
        return;
    }
    if (items.length === 0) {
        setError("‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏°‡∏∂‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÄ‡∏ß‡πâ‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô!");
        return;
    }
	if (!deliveryAddress.trim()) {
        setError("‡πÄ‡∏Æ‡πâ‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô! ‡∏•‡∏∑‡∏°‡πÉ‡∏™‡πà‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏£‡∏∂‡πÄ‡∏õ‡∏•‡πà‡∏≤?");
        return;
    }
    if (!storeId) {
        setError("‡∏ä‡∏¥‡∏ö‡∏´‡∏≤‡∏¢‡∏•‡∏∞! ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ID ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤, ‡∏ó‡∏≥‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏∞");
        return;
    }

    setIsLoading(true);
    setError(null);

    try {
        const storeDocRef = doc(db, 'stores', storeId);
        const storeSnap = await getDoc(storeDocRef);
        if(!storeSnap.exists()){
            throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤!");
        }
        const storeData = storeSnap.data();

        const orderData = {
            userId: user.uid,
            customerName: user.displayName || user.email,
            storeId: storeId,
            storeName: storeData.name,
            items: items.map(item => ({
                id: item.id,
                name: item.name,
                price: item.price,
                quantity: item.quantity,
                image: item.image || ''
            })),
            fees: {
                subtotal: subtotal,
                deliveryFee: deliveryFee,
                appFee: appFee,
            },
            total: total,
            status: 'waiting_for_confirmation',
            createdAt: serverTimestamp(),
            updatedAt: serverTimestamp(),
            deliveryAddress: {
                address: deliveryAddress
            },
            payment: {
                qrImage: `https://promptpay.io/0812345678/${total.toFixed(2)}.png`,
                paidAt: null,
            }
        };

        const orderRef = await addDoc(collection(db, 'orders'), orderData);
        
        // --- üëá ‡∏¢‡∏¥‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üëá ---
        try {
            const token = await user.getIdToken();
            await fetch('/api/notify-user', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
                body: JSON.stringify({
                    userId: storeData.ownerId, // << ID ‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô
                    title: 'üéâ ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß!',
                    body: `‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (${user.displayName || 'N/A'}) ‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô!`,
                    link: '/dashboard/store'
                }),
            });
        } catch(e) {
            console.error("Failed to send notification to store owner:", e)
        }
        // --- ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏¢‡∏¥‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ---

        console.log("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ID:", orderRef.id);
        clearCart();
        alert("‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß! ‡∏£‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏õ‡πä‡∏õ‡∏ô‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô!");
        router.push(`/history`); 

    } catch (error: unknown) {
        console.error('Failed to create order:', error);
        const errorMessage = error instanceof Error ? error.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á';
        setError(`‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ß‡πà‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô: ${errorMessage}`);
    } finally {
        setIsLoading(false);
    }
};

  return (
    <div className="container mx-auto py-8">
      <Card className="max-w-4xl mx-auto">
        <CardHeader>
          <CardTitle className="text-2xl">‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</CardTitle>
        </CardHeader>
        <CardContent>
          {items.length === 0 ? (
            <p className="text-center text-gray-500 py-8">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤</p>
          ) : (
            <div className="space-y-4">
              {items.map((item) => (
                <div key={item.id} className="flex items-center justify-between border-b pb-4">
                  <div className="flex items-center gap-4">
                    <Image
                      src={item.image || `https://placehold.co/80x80/e2e8f0/64748b?text=${item.name ? item.name.charAt(0) : '?'}`}
                      alt={item.name || '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'}
                      width={80}
                      height={80}
                      className="rounded-md object-cover"
                    />
                    <div>
                      <h3 className="font-semibold">{item.name}</h3>
                      <p className="text-muted-foreground">{item.price.toFixed(2)} ‡∏ö‡∏≤‡∏ó</p>
                    </div>
                  </div>
                  <div className="flex items-center gap-4">
                    <div className="flex items-center gap-2">
                      <Button variant="ghost" size="icon" onClick={() => decreaseQuantity(item.id)}>
                        <MinusCircle className="h-5 w-5" />
                      </Button>
                      <span className='font-bold text-lg w-8 text-center'>{item.quantity}</span>
                      <Button variant="ghost" size="icon" onClick={() => increaseQuantity(item.id)}>
                        <PlusCircle className="h-5 w-5" />
                      </Button>
                    </div>
                    <Button variant="ghost" size="icon" className="text-red-500" onClick={() => removeItem(item.id)}>
                      <Trash2 className="h-5 w-5" />
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
        {items.length > 0 && (
          <CardFooter className="flex flex-col items-stretch gap-4 mt-4">
            <div className="grid w-full gap-1.5">
                <Label htmlFor="address">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</Label>
                <Textarea 
                    placeholder="‡∏ö‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏•‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô... ‡πÄ‡∏ä‡πà‡∏ô ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà, ‡∏ã‡∏≠‡∏¢, ‡∏ñ‡∏ô‡∏ô, ‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á, ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï, ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î, ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå" 
                    id="address"
                    value={deliveryAddress}
                    onChange={(e) => setDeliveryAddress(e.target.value)}
                    rows={3}
                />
			</div>
            <div className="space-y-2 border-t pt-4">
                <div className="flex justify-between"><span>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</span><span>{subtotal.toFixed(2)} ‡∏ö‡∏≤‡∏ó</span></div>
                <div className="flex justify-between"><span>‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</span><span>{deliveryFee.toFixed(2)} ‡∏ö‡∏≤‡∏ó</span></div>
                <div className="flex justify-between text-sm text-gray-500"><span>‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</span><span>{appFee.toFixed(2)} ‡∏ö‡∏≤‡∏ó</span></div>
                <div className="flex justify-between text-xl font-bold"><span>‡∏¢‡∏≠‡∏î‡∏™‡∏∏‡∏ó‡∏ò‡∏¥</span><span>{total.toFixed(2)} ‡∏ö‡∏≤‡∏ó</span></div>
            </div>
            {error && <p className="text-red-500 text-sm text-center bg-red-100 p-2 rounded-md">{error}</p>}
            <Button onClick={handleCheckout} disabled={isLoading} size="lg">
              {isLoading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠...' : '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö'}
            </Button>
          </CardFooter>
        )}
      </Card>
    </div>
  );
};

export default CartPage;